name: CI-CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip

          # Remove dvc lines from requirements-dev.txt (if present)
          grep -v '^dvc' requirements-dev.txt > cleaned-reqs.txt || cp requirements-dev.txt cleaned-reqs.txt

          # Install all other dependencies
          pip install --no-cache-dir -r cleaned-reqs.txt

          # Explicitly install dvc with s3 support
          pip install --no-cache-dir dvc[s3]

      - name: Confirm pytest is installed
        run: pytest --version

      - name: Configure AWS Credentials (Frankfurt - eu-central-1)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: DVC Pull (S3 Data Sync)
        run: dvc pull -j 1

      - name: Run Registry Tests
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: pytest tests/test_model_registry.py

      - name: Run Performance Tests
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: pytest tests/test_model_perf.py

      - name: Promote Model to Production
        if: success()
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python scripts/promote_model_to_prod.py

      - name: Configure AWS Credentials (Mumbai - ap-south-1)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Zip Deployment Files
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      - name: Upload Deployment ZIP to S3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://deliverytimepredictiondeployment/deployment.zip

      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws deploy create-deployment \
            --application-name deliverytimeprediction \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name deliverytimepredictiondeploymentgroup \
            --s3-location bucket=deliverytimepredictiondeployment,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region ap-south-1




