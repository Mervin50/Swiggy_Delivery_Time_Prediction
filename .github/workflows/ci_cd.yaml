name: CI-CD

on: push

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Code Checkout
        uses: actions/checkout@v4

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Install Python packages
      - name: Install Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      # Configure AWS credentials for DVC
      - name: Configure AWS Credentials (DVC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # DVC Pull
      - name: DVC Pull
        run: dvc pull

      # Run model registry tests
      - name: Test Model Registry
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: pytest tests/test_model_registry.py

      # Run model performance tests
      - name: Test Model Performance
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: pytest tests/test_model_perf.py

      # Promote model if tests succeed
      - name: Promote Model
        if: success()
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python scripts/promote_model_to_prod.py

      # Configure AWS credentials for ECR & CodeDeploy (ap-south-1)
      - name: Configure AWS Credentials for Deployment
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build and push Docker image
      - name: Build, Tag, and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Zip deployment files
      - name: Zip files for deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      # Upload ZIP to S3
      - name: Upload ZIP to S3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://deliverytimepredictiondeployment/deployment.zip

      # Deploy to AWS CodeDeploy
      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws deploy create-deployment \
            --application-name deliverytimeprediction \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name deliverytimepredictiondeploymentgroup \
            --s3-location bucket=deliverytimepredictiondeployment,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region ap-south-1
